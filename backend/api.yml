openapi: 3.0.3
info:
  title: CHORUS-TRE API
  version: "0.0.1"
  description: Chorus-TRE API for managing projects, apps, services, and users
servers:
  - url: http://127.0.0.1:4010
    description: Prism server for development
paths:
  /users:
    get:
      summary: Returns all of the users in the platform. Only available to admins.
      description: >-
        Returns all of the users registered in the platform, as well as information on their permissions and projects memberships.
      tags:
        - Users
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /users/{username}:
    get:
      summary: Get User
      description: Returns the details of a specific user.
      tags:
        - Users
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string

      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "500":
          description: Server error

  /users/login:
    post:
      summary: Login
      description: The Login endpoint authenticates a User and creates a session.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: An new active Session.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        "500":
          description: Server error OR Authentication error.

  /users/logout:
    post:
      summary: Logout
      description: The Logout endpoint terminates an active session.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionRequest"
      responses:
        "200":
          description: Logout successful.
        "400":
          description: No session key provided.
        "401":
          description: Session not found.
        "500":
          description: Server error

  /users/validate:
    post:
      summary: Validate Session
      description: The Validate endpoint tests whether or not a session is still active.  If it is still active, the Session object is returned.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionRequest"
      responses:
        "200":
          description: The active Session.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        "400":
          description: No session key provided.
        "403":
          description: Session invalid.
        "500":
          description: Server error

  /roles:
    get:
      summary: Get all existing roles
      tags:
        - Roles
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"

  /app-store/apps:
    get:
      summary: Get a list of apps
      tags:
        - App Store
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/App"
    post:
      summary: Create a new app in the app store
      tags:
        - App Store
      responses:
        "201":
          description: Successful operation
    put:
      summary: Update an existing app in the app store
      tags:
        - App Store
      responses:
        "200":
          description: Successful operation

  /services:
    get:
      summary: Get all static services for the platform
      tags:
        - Services
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"
    post:
      summary: Create a new service
      tags:
        - Services
      responses:
        "201":
          description: Successful operation

  /projects:
    get:
      summary: Get all existing projects available to the current user.
      tags:
        - Projects
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
    post:
      summary: Create a new project
      tags:
        - Projects
      responses:
        "201":
          description: Successful operation

  /projects/{projectId}:
    get:
      summary: Get a specific project
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
    put:
      summary: Update an existing project
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          description: Successful operation
    delete:
      summary: Delete an existing project
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successful operation

  /projects/{projectId}/interfaces:
    get:
      summary: Get a list of interfaces in a project
      tags:
        - Project Interfaces
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Interface"
  /projects/{projectId}/datasets:
    get:
      summary: Get a list of datasets in a project
      tags:
        - Project Datasets
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Dataset"
    post:
      summary: Add a dataset to a project
      tags:
        - Project Datasets
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dataset"
      responses:
        "201":
          description: Successful operation

  /projects/{projectId}/services:
    get:
      summary: Get a list of services in a project
      description: Returns a list of services available to the project.
      tags:
        - Project Services
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"
    post:
      summary: Add a service to a project
      tags:
        - Project Services
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Service"
      responses:
        "201":
          description: Successful operation
  
  /projects/{projectId}/services/{serviceId}:
    get:
      summary: Get a specific service in a project
      tags:
        - Project Services
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
    put:
      summary: Update an existing service in a project
      tags:
        - Project Services
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Service"
      responses:
        "200":
          description: Successful operation
    delete:
      summary: Delete an existing service in a project
      tags:
        - Project Services
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: serviceId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successful operation

  /projects/{projectId}/workbenches:
    get:
      summary: Get a list of project's workbenches
      tags:
        - Project Workbenches
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Workbench"
    post:
      summary: Create a new workbench in a project
      tags:
        - Project Workbenches
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkbenchRequest"
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workbench"

  /projects/{projectId}/workbenches/{workbenchId}:
    get:
      summary: Get a specific workbench in a project
      tags:
        - Project Workbenches
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: workbenchId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workbench"
    put:
      summary: Update an existing workbench in a project
      tags:
        - Project Workbenches
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: workbenchId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Workbench"
      responses:
        "200":
          description: Successful operation
    delete:
      summary: Delete an existing workbench in a project
      tags:
        - Project Workbenches
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: workbenchId
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Successful operation

  /projects/{projectId}/monitor:
    get:
      summary: Get the monitor for a specific project
      tags:
        - Project Monitor
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Monitor"

  /projects/{projectId}/energy-tracker:
    get:
      summary: Get the energy tracker for a specific project
      tags:
        - Project EnergyTracker
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnergyTracker"

  /projects/{projectId}/logger:
    get:
      summary: Get the logger for a specific project
      tags:
        - Project Logger
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logger"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        username:
          type: string
          example: "user1"
        email:
          type: string
          example: "user@example.com"

    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        name:
          type: string
          enum:
            - admin
            - patient
            - researcher
            - data-owner
            - data-manager
          example: "admin"
        description:
          type: string
          example: "Administrator"

    Notification:
      type: object

    Platform:
      type: object

    Project:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 345678
        name:
          type: string
          example: "Project 1"
        description:
          type: string
          example: "This is the first project"
        status:
          type: string
          example: "active"
          enum:
            - designing
            - feasable
            - authorized
            - active
            - archived
        documentation:
          type: string
          example: "http://host/doc/project1"
        members:
          type: array
          items:
            $ref: "#/components/schemas/User"
        owner:
          $ref: "#/components/schemas/User"
        links:
          type: array
          items:
            $ref: "#/components/schemas/Link"

    WorkbenchRequest:
      type: object
      properties:
        appId:
          type: integer
          format: int64
          example: 123456
        cpu:
          type: string
          example: "4"
        gpu:
          type: string
          example: "1"
        ram:
          type: string
          example: "16"

    Workbench:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        appId:
          type: integer
          format: int64
          example: 123456
        name:
          type: string
          example: "App 1"
        description:
          type: string
          example: "This is the first app"
        status:
          type: string
          example: "active"
        documentation:
          type: string
          example: "http://host/doc/app1"
        cpu:
          type: string
          example: "4"
        gpu:
          type: string
          example: "1"
        ram:
          type: string
          example: "16"
        interfaces:
          type: array
          items:
            $ref: "#/components/schemas/Interface"

    App:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        name:
          type: string
          example: "App 1"
        description:
          type: string
          example: "This is the first app"
        status:
          type: string
          example: "active"
        documentation:
          type: string
          example: "http://host/doc/app1"
        interfaces:
          type: array
          items:
            $ref: "#/components/schemas/Interface"

    Interface:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        type:
          type: string
          example: "ssh"
        endpoint:
          type: string
          example: "ssh user@host"
        documentation:
          type: string
          example: "http://host/doc/ssh"

    Template:
      type: object

    Image:
      type: object

    Dataset:
      type: object

    DataStore:
      type: object

    Logger:
      type: object

    Monitor:
      type: object

    EnergyTracker:
      type: object

    Workflow:
      type: object

    Service:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 123456
        name:
          type: string
          example: "Service 1"
          enum:
            - GitLab
            - ML FLow
            - Triple Store
            - S3
            - ARX
            - Backup & Versioning
            - Monitoring
            - System State Database
        description:
          type: string
          example: "This is a static service available for the platform"
        status:
          type: string
          example: "active"
        documentation:
          type: string
          example: "http://host/doc/service1"
        interfaces:
          type: array
          items:
            $ref: "#/components/schemas/Interface"

    LoginRequest:
      properties:
        username:
          description: Username
          type: string
        password:
          description: Password
          type: string

    SessionRequest:
      properties:
        key:
          description: Session key.
          type: string

    Session:
      properties:
        key:
          description: Session key.
          type: string
        username:
          description: The Username of the User logged into this Session.
          type: string
        ipAddress:
          description: The IP address that created this Session.
          type: string
        expiration:
          description: The current expiration date of the Session.
          type: string
        user:
          description: The User logged into this Session.
          $ref: "#/components/schemas/User"

    Link:
      type: object
      properties:
        rel:
          type: string
          example: "apps"
        href:
          type: string
          example: "http://host/api/v0.0.1/projects/123456/apps"
        action:
          type: string
          enum:
            - GET
            - POST
            - PUT
            - DELETE
          example: "GET"
        types:
          type: array
          items:
            type: string
            example: "application/json"

  securitySchemes:
    authenticatedSession:
      type: apiKey
      description: Session-based security using LDAP authentication
      name: session
      in: query
